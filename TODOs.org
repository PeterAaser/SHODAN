* Neste gang
**  Se på db stuff
   Et eller anna får GA til å stoppe
   
  Debug all den nye HTTP koden.
  Debug litt mer på DSP.
  Se litt på visualizer?
  
* Database specification
** ER
   For each experiment
*** Metadata
   Experiment parameters
   Date (start, finish)
   Culture name
   Textual description

*** Experiment data
   Raw data chunks?

   On experiment start: if data recording: create an experimentInfo field and a set of channelRecordings.
   Each channelRecording should get its own sink for storing data.
** Use cases
*** Query for all recordings in some timespan
*** Query for all recordings with length over 4 minutes
*** Reading the experiment the runner decides to retry from some timestamp with a different filter
*** A program reads both raw data and a processed stream (spike data)
*** A program processes spike detection for all recordings in some range of time

* Database notes
** To open db in terminal:
   peter$~/:    sudo su postgres 
   postgres$~/: psql -d world -U postgres
  
   select name from country;
   \q
** To redo a database
   peter$~/:    sudo su postgres 
   postgres$~/: psql -c 'drop database $db;' -U postgres
   postgres$~/: psql -c 'create database $db;' -U postgres
   postgres$~/: psql -c '\i $db.sql' -d $db -U postgres
   
   
* About neurons
** Filtering
   None of these assumptions have any sort of neurological basis, they're just assumed
   in order to get a working prototype.

   I assume maximum amount of spikes we're interested in recording is 50 per second

* QUEUE
** Read the red book about free monads
** Read the red book about scalatest

* TODO Unified source
  Should gather up an entire segment. 
  Inbetween each segment new queues may be added to the send queue.
  
  If the topic solution is used then each segment must have an identifier
  in order to assure synchronization between topics. 
  if I sub to topic 4, 5 and 9 with segments 445, 445 and 446 then I must
  discard a segment from topic 4 and 5.

  This doesn't matter for visualizing, but it's important for ANNs etc.
  
** Use case:
*** Source arbitrates a connection, either to DB or to MEAME
*** User starts visualizing 
    From the source PoV this is just a bunch of (queue, channel) tuples
*** User stops visualizing
    The source must remove the now invalid queues
*** Visualization is restarted
    Same as first
*** ???
