* TODO Add error handling
** TODO On TCP connection close do some cool shit
 
* TODO Persistent storage
** DONE Write MEAME input to file
   CLOSED: [2017-03-13 ma. 17:47]
*** DONE Write raw input to file
    CLOSED: [2017-03-12 sø. 12:40]
*** DONE Write parameters to file
    CLOSED: [2017-03-13 ma. 17:47]
** DONE Read MEAME input from file
   CLOSED: [2017-03-14 ti. 17:07]
*** DONE Read raw input from file
    CLOSED: [2017-03-14 ti. 17:07]
**** DONE write implementation
     CLOSED: [2017-03-12 sø. 16:02]
**** TODO test implementation
*** DONE Read params from file
    CLOSED: [2017-03-13 ma. 17:47]
**** DONE write implementation
     CLOSED: [2017-03-12 sø. 16:03]
**** TODO test implementation

    
** DONE Test and fix write and read
   CLOSED: [2017-03-18 lø. 13:03]

** TODO Add a real webscale database

* TODO Create main control module
** Inner loop
*** TODO Inner loop should be responsible for trying out different ANNs
*** DONE Refactor inner loop
    CLOSED: [2017-03-11 lø. 17:01]
    Inner loop must be refactored to offer a pipeline where stages are more suited for working
    in parallel without duplicating work
*** TODO Add pipe rebuilding to some criteria
**** TODO Create proof of concept
**** TODO Add self modifying ANN pipe
** Outer loop
*** TODO Should dispatch the inner loop
**** TODO MEAME needs an API for selecting datastream
**** TODO should create the bulk logging task and inner loop task with MEAME sockets
*** DONE Should be responsible for opening the server connections to MEAME
    CLOSED: [2017-03-11 lø. 17:01]
*** TODO Outer loop should log all incoming data from MEAME
**** DONE Create flat fileWriter
     CLOSED: [2017-03-11 lø. 17:01]
**** TODO Write to database
*** TODO Search for suitable channels
    Figure out which channels respond to stimuli and select them as
    primary acquisition/stimulation electrodes.
** Spec
   Control module should:
*** Should open connection to server
*** Should modify the pipe by replacing it with a new version
*** Modification should be done by listening to various feedback from the current pipe

* TODO Create RPC pipes
** Notes
   When a new MEAMEControl is instantiated the constructor should return a stream.
   This stream will be connected to all available input actions, pat match it from there.

* TODO Better DI
** TODO Figure out best practice for DI
*** TODO Try out Free monad
** TODO SHODAN should be able to select experiment params from either file of conf.
*** Create parses for params

* TODO Make website prettier
** Notes
   Needs to be webscale

* General
** TODO Fix alternator
   Doesn't look right, and even if it is it's much too arcane so a rewrite can't hurt


* Notes
** Logging
   In order to log what SHODAN does and thinks it could be useful to implement a logging scheme.
   This is possibly something best done with Task (or F[_].. ), check it out.

* Sist gang
  Endrer lagringsformen til å være basert på arrays med heltall heller enn å lagre det på serielt format.
  Så lenge serialisering fungerer så har det lite hensikt å lagre alt på dette formatet, altså vi vinner
  ingenting på det.
  
  Har satt opp til eksperiment:
  Hent rådata ==[Int]==> numerisk ==[splitter]==> kanalData ==[DBWriter]==> ferie

  I morgen: Sjekk at MEAME ikke sender tulledata. Lag en metode som sender dummy data (type 0x1... , 0x2..., 0x100..., 0x10000 etc etc)
  og sjekk deserialiseringen (om ikke annet så gir det noe å måle opp mot om det er MCS som fucker opp alt)

  Sjekk også entrypointen din, kan du trigge SHODAN remote?

  Vurder å bare skrive flatt til fil som en elendig plebeier på MEAME maskinen.

* Doobie notes

  #+BEGIN_SRC scala
  def niceMeme(meme: Int): Int = meme + meme
  #+END_SRC

* Database specification
** ER
   For each experiment
*** Metadata
   Experiment parameters
   Date (start, finish)
   Culture name
   Textual description

*** Experiment data
   Raw data chunks?

   On experiment start: if data recording: create an experimentInfo field and a set of channelRecordings.
   Each channelRecording should get its own sink for storing data.
** Use cases
*** Query for all recordings in some timespan
*** Query for all recordings with length over 4 minutes
*** Reading the experiment the runner decides to retry from some timestamp with a different filter
*** A program reads both raw data and a processed stream (spike data)
*** A program processes spike detection for all recordings in some range of time

* Database notes
** To open db in terminal:
   peter$~/:    sudo su postgres 
   postgres$~/: psql -d world -U postgres
  
   select name from country;
   \q
** To redo a database
   peter$~/:    sudo su postgres 
   postgres$~/: psql -c 'drop database $db;' -U postgres
   postgres$~/: psql -c 'create database $db;' -U postgres
   postgres$~/: psql -c '\i $db.sql' -d $db -U postgres
   
