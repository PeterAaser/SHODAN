* ThoughtPad
  
* Neste gang
  
* Doing
** TODO Unfuckulate using RNN
** DONE Render stim freqs?
   Just gonna use a canvas like a knuckle dragging peasant
*** DONE Render
*** DONE Stim req case class
*** DONE Generate stim req codec
*** DONE Send render requests
**** DONE Redo API to use case class
**** DONE Redo frontend handler to use case class
**** DONE Send requests in assembleMazeRunner
** TODO Render stimulus graph?
   Not realtime, that would be a mondo pain in the ass
*** TODO Make amplitude a state setting
*** TODO Make a stim wave class?
** TODO Decouple the optimizer and do a run on real neurons.
** TODO Speed up the agent
* Now
** TODO Attempt adaptive spike detector
*** TODO Create a threshold-visualizer

** TODO Figure out why spike detector gets so many hits on stimuli
   Don't really care tbh, can just "blank" if it gets too bad
*** TODO Create a valid/invalid stream to "blank"

** TODO Fix fucking annoying warnings

* Later
** TODO Refactor the Mazerunner and optimizer
** TODO Create an algebra for modifying program state
   Actually we'll instead create allowable actions from a given state
   It's "good enough" for now
   
** TODO Database scheme fixerino
   Best 책 diskutere med Thomas
    
** TODO Set up doobie resource a la http
** TODO Revisit the XOR challenge
*** TODO Create XOR challenge
**** DONE Implement sketch
**** TODO Verify design
*** TODO Separate out Experiment, use XOR as trial
*** DONE Implement experiment class
*** TODO Verify that XOR works
*** TODO Redo agent in terms of Experiment

** TODO Add MEA selection
*** TODO Frontend
**** TODO Add new MEA
**** TODO Remove MEA
**** TODO Select MEA in dropdown
*** TODO Backend
**** TODO DB schema + methods
**** TODO RPC
    
   Use the udash akka demo as a template to add MEAs
** TODO Add file upload form
** TODO Find time library that plays well with psql and the jvm/js boundary
** TODO Figure out how to better handle reporting equipment failure


* Maybe
** TODO Optimize the evaluator
*** DONE Optimizer should use Agent Agent Input triplets to evaluate.
*** TODO The optimizer needs to be rewritten imperatively to not suck massive ass speedwise
    Likely GC pressure is causing everything to go slow
    
    Alternative 1: Figure out profiling
    Alternative 2: Figure out a more basic test
    Alternative 3: Bricoleur it

*** TODO Possible silly race condition?

** TODO Fix buffering glitching issue
   Slowdowns and glitching on the frontend
    

* Finished
** DONE Figure out stimulus waveform thing
*** DONE Stimulus upload is not being sent it seems
    Setup was just never called
** DONE META Flesh out experiment/feedback section of paper thingy.
** DONE Set up the test server and visualize the spike heat map thing
*** DONE Upload the data
** DONE Move perturbation transformation to a configurable class
*** DONE Add binary/staggered perturbation in the conf?
*** DONE Move from Double => Option[Double] to Double => Double
    Scalar to period should be responsible for handling values out of range
*** DONE Turn toStimReq to Kleisli
    Ended up doing a class instead
** DONE Investigate ANN activation function
*** DONE Create a real activation (why the fuck did I default to linear...)

** DONE Investigate DSP crash
   Seemingly has to do with the return from reg read list being empty

   The issue was indeed an empty return due to not bothering figuring out the encoder/decoder shit
** DONE Figure out what needs to happen for a successful (ish) run 
*** DONE Check that data sources work, i.e a "dry" run can be done with st.olavs
**** DONE where did the agent go?
     Some variation of assemble maze runner should be called
     This happens in controlPipe.start
     Agent is actually being rendered. Maybe the canvas isn't shown?
     Are all the canvases controlled from canvascontroller? Why then is it 
     named waveformcomp?
     The canvas was invisible...
**** DONE Figure out how the MEA -> ANN pipeline looks like
***** Figure out spiketools
      Probably runs off of the state stuff innit lads
      It does

**** DONE Ensure I didn't make a big boo boo with concatenating input to RO
     I didn't :D
     
** DONE Make a basic testcase with a more "scary" reservoir
   We passed!!
   
** DONE Improve the GA backend for maze runner
   Test strategy: Run the new maze runner and ensure that the optimizer logs
   the expected output upon agent termination.
*** DONE Make the runner actually work again
*** DONE Use the new filters
*** DONE Verify that they work
*** DONE Change the optimizer to delta between autopilot and actual.
*** DONE Disconnect the feedback aspect of mazerunner
*** DONE See refactor GA
*** DONE Reset scoring on new data
** DONE Create a test case for neural network self-configurator
*** DONE Make the easiest "reservoir" model for wall avoidance
    We can even bypass the need for spiking by using a different filter.

** DONE Make the GA actually beat the simple reservoir case
** DONE Visualize all spikes
** DONE Add time compression switchmap for visualizers
*** DONE For wf
*** DONE For large wf

** DONE Create buffered visualizer
*** DONE Canvas queue 
    At data push, the canvas chops a call into a queue.
    At each frame, precisely one element is pulled from this queue,
    thus the size of each element decides the speed.

** DONE Figure out 'waking up' topics
** DONE Figure out why spike detection "staggers"
** DONE Stop using tagged seg on the topics
** DONE Investigate a better spike detector pipe
*** DONE Gaussian blur
*** DONE Deviation from ghetto lowpass filter
*** DONE On/Off spike detector
*** DONE Spike aggregator
*** DONE Parametrize based on time
   
*** DONE Test using the spike detector visualizer
**** DONE Implement (see below)

** DONE Better draw-call API
*** DONE Fix up the frontend
*** DONE Fix up the backend
    
** DONE Visualize spike detector
*** DONE Make a shitty RPC pipe for single channel
*** DONE Make selectable visualizer

** DONE Reintroduce topics and raw as primitives
*** DONE Re-enable the frontend stuff
*** DONE Re-enable the draw call stuff

** DONE Figure out a smarter API from RPCserver
*** DONE Make a simple on/off toggle on the frontend as POC

** DONE Redo CommandPipe yet again.
   This will never truly get done it seems.
*** DONE Separate concerns in startSHODAN
    Setting up frontend, checking health, connecting to MEAME etc should be
    separated from concerns such as creating topics etc.
*** DONE Investigate how to regain the separated functionality
**** DONE Rethink user commands
     Drastically reduced the size of the command API.
     State altering commands are now done via altering the
     shared Conf and State instances
**** DONE Implement Broadcasting
**** DONE Implement Live and playback broadcast
**** DONE Implement Experiment setup

*** DONE Set up frontend/backend coherence for experiments
    How about when starting live frontend must also supply a config to guarantee what the user sees 
    is what pers gets
   
** DONE Add Files from USB stick
*** DONE fikserino p책 recording Playback
*** DONE fikserino p책 recording
*** DONE figure out why the recordings are bad

** DONE Refactor into API packages kinda
*** DONE DSP
*** DONE Files
*** DONE TCP
*** DONE Http
** DONE Implement recording view functionality
*** DONE Basic testing
*** DONE Investigate why channels get shuffled
*** DONE Validate recording ready
*** DONE Add form for recording info
    
** DONE Redo how HTTP is handled    
*** DONE Client resource setup
*** DONE Make http calls use the new fancy schmancy client
   
** DONE Move to Kleisli for configs
*** DONE For Maze
*** DONE For DB
*** DONE For waveforms
    
** DONE Better frontend rendering of wf
*** DONE Figure out a good strategy for verification of correctness on the frontend
*** DONE Figure out why the fuck we can't even draw straight lines...
    The frontend it seems is shitting the bed
    Oh it was just shitty js APIs xD
    
** DONE Move agent runner to Maze
** DONE Redo ffANN to use chunks
** DONE Gather up agent stuff in Maze
*** DONE Decouple agentPipe.evaluatorPipe into evaluator and taskRunner
*** DONE Unfuckulate FFANN
**** DONE Implement
**** DONE Bare minimum testing lol
   
*** DONE Unfuckulate GA
*** DONE Implement/move the required ingredients for Experiment
*** DONE Debug the inevitable cloggening
    
** DONE Bedre logging og viz av GA events
   Leaves much to be desired...
** DONE Forsikre om at vi ikke Mike Pencer nevronene
   Cannot be done on DSP sadly. No hardware protection #YOLO
** DONE Fix stimulus upload channel errors
   Forgot to offset each channel to make room for sideband
** DONE Fix electrode maps
*** DONE fix rendering reorder
*** DONE Investigate if stim electrode names are equally retarded
    They are!
*** DONE fix stim channel reorder
    
** DONE ReEnable agent drawing
*** DONE Add scaffolding for rpc calls etc
  
** DONE Create a mock DSP    
   Should take a stream of commands as argument.
   The emulator can jump to next event, how should this be handled??
   The DSP needs a 'run n ticks' 
*** DONE Implement run N ticks
*** DONE Test the dsp emulator in isolation
*** DONE Test the dspe emulator over multiple runs
*** DONE Create the dsp emulator pipe
    
** DONE Unfuckulate the mockserver
   One elements streams are resources!
  
** DONE Refactor the DSP config and stim pipeline
*** DONE RPC still has DspCalls._
*** DONE Stim request pipe
*** DONE DSP comms rewrite
    Er n책 flyttet til perturbationTransform
** DONE Figure out why triggers aren't fired off correctly.
** DONE Add DSP tests to the live section
*** DONE Add electrode select to live section
    It looks like shit. IDGAF
** DONE implement buffer for smoothing over segment sizes when visualizing
   In order to do this I need a pipe that changes segment lengths
** DONE Prune shared state, separate static and dynamic settings
** DONE Investigate MEAME data
** DONE Move endpoints to using Queue
** DONE Remove visualizers dependency on experiment parameters
   Sending wf data should be done with packets of data. The currently used 
   implementation had to work with a raw byte array. Not so fun...
** DONE Less unescessary restarts for both SHODAN and MEAME
*** DONE MEAME
*** DONE SHODAN
**** DONE [[*Chunk all data from TCP for easier restarts etc][Chunk Incoming]]
**** DONE [[*Redo entrypoint][Redo entrypoint]] 
**** DONE UI support

** DONE Redo build file
   Look at build.sbt.next
   When testing out the new build file make sure scala js
   actually updates.
   
** DONE unfuckulate agent serializing
   go back to scodec or circe
** DONE Convert all configurable top level methods to be under IO to facilitate Signal of Conf
** DONE Add TCP listening for other users, possibly on specific channels
   it aint pretty though...
   
** DONE Make the new stim-queue work properly
** DONE Add more log parsing methods
** DONE unfuckulate agent serializing
   currently doing it in a fugly manner since scodec stopped working for some reason.
** DONE fix segment length issue.
   ups...
** DONE Stimulus
*** DONE Rewrite stimulus.
**** DONE Write
    See MEAMEutilz
**** DONE Verify
   
** DONE Redo Stim requests to use groups
   se p책 dspcomms
** DONE Redo DSP requests  
   Currently all auxillary DSP functionality from MEAME is disabled.
*** DONE DSP barf log
*** DONE Consider re-adding auxillary methods (reset and upload)
    Not a DSP request, this is a more general MEAME req
*** DONE Stimulus call
** DONE Create minimal repro of scope error 
   Something about topics is causing shit to go ultra-south...
** DONE Verify entrypoint2
*** DONE Broadcasting
*** DONE MEAME data
*** DONE File playback
    Works, but crashes on empty string in the end
*** DONE Agent
** DONE Implement and test finalizing of db recording.
** DONE Verify and finish file playback.
*** DONE Add basic user interface support
*** DONE Figure out how to start and stop recordings
    Start should be params -> IO[IO[Unit]] perhaps?
    Outer IO is the start, the inner IO is the finalization which
    writes metadata to the db etc?
    
    This ended up getting a lot more involved actually!
    
*** DONE Verify that recording triangle waves from MEAME2 works
**** DONE Stream to database
     Had an issue where using a queue would cause displaying and
     saving data caused the data to get split, rather than duplicated.
     
     Now uses topic, which should fix the problem
     
**** DONE Stream from database
*** DONE Get throttling to work properly
*** DONE Verify correctness
    Some verification dawg...
   
** DONE Redo entrypoint
*** DONE Implement IO actions as described in [[file:backend/src/main/scala/cyborg/entrypoint2.scala::case%20class%20ProgramState(][program state]] 
    When shut down, a process must: 
    + notify the UI
    + set its boolean to false
    Pausing a recording has been considered but does not make 
    sense since this would lead to a seemingly fine recording 
    with a temporal jump.
**** DONE stop and start data acquisition from MEAME
**** DONE stop (finalize) and start recording 
**** DONE stop and start data playback from DB
     We will not be doing pausing at the time being
**** DONE stop and start agent
***** DONE make the GA runner stoppable and startable 
*** DONE Resetting MEAME
    Will not implement
    
** DONE Write more documentation
** DONE Stim req system
*** DONE Implement
*** DONE Test
**** DONE Implement logging rig
**** DONE Debug with logging rig
** DONE Implement stim on MEAME
** DONE Fix perf issue with sending data to frontend. It keeps buffering way past shutting down MEAME
  Turns out it was queue segment size being 1
*** DONE Try to create a send only program
*** DONE Figure out the deal with queue sizes
   dequeueAvailable or dequeueBatch achieves what we're after

** DONE Chunk all data from TCP for easier restarts etc
   As it is, the datastream from MEAME and the DB does not identify which segment is running.
   By adding tags we can make it easier to restart etc.
   Should topics get the same treatment?
** DONE Fix the GA for the last time
*** DONE Create generic version
*** DONE Test with simple example
*** DONE reimplement GA in terms of generic version
**** DONE Implement
**** DONE Make it work
  
** DONE Add sine wave generator on MEAME for debugging
  Ended up being sawtooth, no difference really



* Dropped and/or Not needed

  
* how 2 fs2 fra gitter (ikke slett plz)
Yeah, I do that in too many places
but soon I've got a working version out, then I'm gonna refactor and write good tests and all that jazz while the stable version automagically outputs research data
and everyone will be happy

Fabio Labella @SystemFw 15:51
then you'd need to write the usual recursive function as you do with Pulls in general
and then recursive(input).stream to get a Pipe

PeterAaser @PeterAaser 15:52
btw, is there a good place to get an idea of how fs2 works on the inside?

Fabio Labella @SystemFw 15:52
yes
the code :stuck_out_tongue:

PeterAaser @PeterAaser 15:52
Say I want to learn enough about to fs2 to actually contribute

Fabio Labella @SystemFw 15:52
sorry

PeterAaser @PeterAaser 15:52
How would you start

Fabio Labella @SystemFw 15:52
so there's a few layers, so to speak

PeterAaser @PeterAaser 15:52
I've actually read much of the code, but I tend to not stray into the core parts where scary things lie

Fabio Labella @SystemFw 15:53
so what I do

PeterAaser @PeterAaser 15:53
like don't ask me what a FreeC is (Free and coyoneda?)

Fabio Labella @SystemFw 15:53
no, that's just a Free monad with an extra constructor to take care of exception handling
cats Free already has coyoneda embedded in it
so I have a few random suggestions
first of all, master the Stream api (apart from where concurrency is involved)
assuming that it works by magic
but like, try and figure out what each method does, how to combine them, useful patterns and the like

PeterAaser @PeterAaser 15:55
I'm pretty good at the stream API. My activity in this channel might give a false impression, but that's because I usually only ask when I need to do something stupid :stuck_out_tongue:

Fabio Labella @SystemFw 15:55
lol I was speaking in general, not your specific knowledge :stuck_out_tongue:

PeterAaser @PeterAaser 15:56
but it's definitely a good place to keep improving

Fabio Labella @SystemFw 15:56
then do the same, but learning about the implementations
which are kinda divided in different categories
i.e. things that are written in terms of other streams combinators <- these are the best
concurrency/cats-effect <- I'll tell you about this in a second
things that are implemented using Pull <- this are the second best

PeterAaser @PeterAaser 15:57
How about stuff like scopes which aren't really visible to the end user?

Fabio Labella @SystemFw 15:57
things that are primitives <- last

PeterAaser @PeterAaser 15:57
unless something that shouldn't explode explodes

Fabio Labella @SystemFw 15:57
well, you just need to figure out the core interpreter for that
so Algebra
it's tricky, not gonna lie

PeterAaser @PeterAaser 15:58
haha I remember some of the signatures from 0.9

Fabio Labella @SystemFw 15:58
a good exercise is to dive into the async package, however
it's kinda standalone

PeterAaser @PeterAaser 15:58
The algebraF thing
that's a good tip

Fabio Labella @SystemFw 15:58
what I did
is spending a weekend going from the Java memory model (which you need to understand the lock-free queue used in actor)
then from actor to the implementation of Ref
than from the semantics of Ref to the concurrent data structures
and then from there to the concurrent combinators join, start concurrently and so on

PeterAaser @PeterAaser 16:00
That's for the async part, right?

Fabio Labella @SystemFw 16:00
yes
there's kinda two styles of concurrency is fs2 (this is my own informal split, so don't take it for granted)

PeterAaser @PeterAaser 16:00
Right, that sounds like a good way to go about it

Fabio Labella @SystemFw 16:00
stuff in async, which I've just mentioned
and stuff like merge, which ultimately relies on AsyncPull
but the async package itself is challenging enough as a start, imho
one extra tip
you don't have to go all the way down
for example, there's no need to understand how Actor works

PeterAaser @PeterAaser 16:01
Yeah, that's a good point

Fabio Labella @SystemFw 16:01
its semantics are very clear, so you can assume them as primitives
because understanding actor can be very tricky
I'm keen on low level concurrency so I did that
but it's not necessary
unless you fancy reading about lock-free algorithms in C

PeterAaser @PeterAaser 16:02
Haha, I'm running the parallel computations coursework at my university
I try very hard to avoid semaphores and similar unless I absolutely have to

Fabio Labella @SystemFw 16:03
You should also bear in mind that I'm a maintainer, and I don't know everything about the library yet

PeterAaser @PeterAaser 16:03
It's just impossible to get them right consistantly

Fabio Labella @SystemFw 16:03
so you could definitely contribute something while you learn
well, the fs2 semaphores are quite nice :P
but yeah, have you ever used haskell STM?

PeterAaser @PeterAaser 16:04
Thanks a lot, I hope I get some free time soon so I can finally go back to dagobah and finish my jedi training
No, learning haskell is on my to-do list
can't be that hard to learn haskell when I write functional scala

Fabio Labella @SystemFw 16:04
:+1:
sweetest concurrency model I've used
actually, you're mostly going to find that a lot of things are easier/less convoluted
although I really like scala as well

PeterAaser @PeterAaser 16:05
I really prefer scalas syntax, it's much easier for me to parse
although I dislike curly braces
and the type inferenc
Like how can Nil not be inferred
aornshdi

Fabio Labella @SystemFw 16:06
ime, syntax really does depend on habit
I used to hate scala syntax and its noise
now I don't mind it at all

PeterAaser @PeterAaser 16:06
(0 /: List[A[Lot[Of[Stuff]]]]())(_+_)

Fabio Labella @SystemFw 16:06
lol

PeterAaser @PeterAaser 16:06
instead of (0 /: Nil)(_+_)
but apart from that I find scalas type declarations to be very informative and I don't mind them at all

Fabio Labella @SystemFw 16:07
foldl' 0 (+)
the kind syntax is atrocious

PeterAaser @PeterAaser 16:08
I quite like /:
oh yes
but bearable with macros luckily
that's why I bet on scala, because shit like that ends up being fixed
and not just with boilerplate tools
lol, friend sent me this
http://i.4cdn.org/sci/1507818316576.png

proof via interpretive dance

Fabio Labella @SystemFw 16:09
amazing

PeterAaser @PeterAaser 16:09
we should totally find out what it is and find a way to incorporate it into the fs2 docs

* Database notes
** To open db in terminal:
   peter$~/:    sudo su postgres
   postgres$~/: psql -d world -U postgres

   select name from country;
   \q
** To redo a database
   peter$~/:    sudo su postgres
   postgres$~/: psql -c 'drop database $db;' -U postgres
   postgres$~/: psql -c 'create database $db;' -U postgres
   postgres$~/: psql -c '\i $db.sql' -d $db -U postgres
   
** Some commands
   \dt to show tables

** Doobie pitfalls
   For the doobie sql string interpolator $ is not simply textual replacement!
   This means that 
   #+begin_src scala
     val aa = "aa"
     val zip = "ZIP"
     sql"""
       INSERT INTO dataRecording (experimentId, resourcePath, resourceType)
       VALUES (123, $aa, $zip)
     """.update.check.unsafeRunSync()
    #+end_src

   is not equal to
   
   #+begin_src scala
    sql"""
      INSERT INTO dataRecording (experimentId, resourcePath, resourceType)
      VALUES (123, aa, zip)
    """.update.check.unsafeRunSync()
   #+end_src

   However this does not hold for numbers!
   
   
* Deploying
  Run ~/ngrok/ngrok 8080

   
* Dev diary
** GA terminates after one evaluation
   Turns out the filter terminated after TicksPerEval,
   however we need 5*ticksPerEval for 5 challenges!
   This is a hint that the current method isn't very
   ergonomical, it should not be the responsibility of
   the filter to know when it's done.

** Figuring out how to represent state in SHODAN
   Having a commandPipe seems like a decent approach, but 
   I don't like how it currently does not really alter its 
   state inbetween updates.
   
*** Problem 1: The frontend does not get updated. 
    The commandpipe and the frontend does not share a model.
    I want a react-ish model where state changes in the
    commandpipe and the actions it is running will automatically 
    be visible to the frontend.
    
*** Problem 2: Commandpipe is essentially stateless.
    The commandpipe is not in a good state at the moment.
    Warts such as uns*feRun in StartMEAME and generally finding 
    it difficult to alter the go function inbetween invocations.
    
*** Possible solutions:
**** Signal
     commandPipe could simply broadcast to a signal, and each listener 
     case matches. Possibly multiple listeners can listen to the same 
     token such that when running from DB and a MEAME token is submitted 
     then we stop running from DB, and recording finalizes when data 
     source is switched.
     
**** Topic
     Topics are many in many out, more geared towards streaming mass data 
     than Signal (which lacks a Sink method). Topic and Signal can both 
     be implemented in terms of each other for my case, ignoring more 
     tricky effects wrt asynchronity.

**** More sophisticated pull
     By keeping the current model the problems above must be resolved.
     A signal should still be implemented in order to handle failure and/or 
     interruption of a task, for instance MCS hardware exploding.
     
*** Going with signals?
    The various methods in assemblers must now return an interrupt action which 
    can then be stored in the ProgramState case class.
   
** A better toplevel interface
*** Description
    In order to make SHODAN more flexible it is necessary to add support 
    for handling user actions that change the state of a running program. 
    In order to do this I have currently settled on a model where a signal 
    holding a program state is used, which is both read and set by a pipe 
    for user commands. 
    The signal has many listeners, and the listeners may alter the signal  
    state themselves, which leaves open the question about how to handle 
    cycles in the listener graph etc in a safe manner.
    While this is of course ultimately undecidable it would be nice to have 
    at least some measure of static analysis.
    Another problem with the current approach is the lack of atomicity, i.e it is 
    possible to set meameRunning to false without actually running the 
    corresponding IO[Unit] stopData.
   
    What is it that I actually want?
    Ideally I would like to have a language where I could specify constraints such as
    "If the data acquisition stops, so must any DB recording."
    "If data acquisition is restarted then recordings should stop"
    "If data acquisition start is issued when data acquisition is running then a restart is issued"
    etc...
   
**** A start stop class
     When starting a data broadcast I also want to get an action to stop the broadcast.
     One way to do this is to change the signature to IO[(IO[Unit],IO[Unit])] but in 
     this case it is not possible to tell which IO action runs the broadcast and which 
     stops it. To rectify this I simply made the InterruptableAction case class in utilz.
    
**** Doing unrelated things based on input
     When a RunFromDB token is received we would like to shut down MEAME in addition to 
     setting up the DB datastream. 
     In the initial solution I matched for StopMEAME | RunFromDB to run the MEAME shutdown, 
     but this has the effect that the 
    
**** The case for full match
     It would be useful if we could do a full version of match. In match we want a single value 
     (which is why non-exhaustive matching is a compiler error with sealed trait, or runtime 
     error if not)
    
     For some sealed ADT A we'd like fullMatch A to return NEL[A] or give a compiler error.
     Possibly we could allow a fullMatch A to return List[A] instead where the list may be 
     empty.
    
     For now it seems using partial functions is the best way to do this, simply run input 
     through all the PFs to get a List[Option[Action]] which I fold and collapse to a single 
     action!
    
     PartialFunction may not be what we're after since we run into awkward behavior when using 
     predicates. 
     With match we can mix a type match with a predicate (i.e case A if someCondition => ...) 
     however this is not so easy with the proposed partialFunction approach...
    
**** Ideal and real phase decoupling
     What if user commands simply changes the desired "ideal" state of the program, and it's up
     to the different components listening to the program state signal to change their state to 
     reflect this? This way user commands could be idempotent, meaning in order to restart 
     MEAME you would have to first turn it off, then back on. Is this really desirable?
    
**** A case match recursively calling itself until it is resolved?
     A two-tiered system where the cmd pipe can issue new commands to itself. This fixes the case
     where a restart is issued. Now the cmd pipe can for instance issue a shutdown then a start 
     command to itself in the case that it receives a start command when already started (restart).
    
     Won't work without semaphores and similar to synchronize between the signal handlers and the 
     command pipeline. Atm I'm too tired of this mess, so I'm just going to have to be brutally practical tm...

*** Resolution
    The chosen architecture is a commandPipe responsible for reading commands and changing the 
    ideal program state based on this. 
    Several listeners discrete stream changes to program state and respond accordingly, modifying 
    the program state as they go. Definitely not a perfect approach, does not make nasty race 
    conditions hard to express, but needs to be settled.
    
*** Thoughts
    Some of the issues might stem from stuffing all inputs into a single pipe.
    Maybe the HTTP server could handle most of it, if not all?
    
** A bug in fs2
   TODO write about it
   
** Setup woes
*** Problem: The tire-fire of DB mgmt
    Apparently you must change pg_hba to use md5...
*** Problem: st. olavs machine doesn't like outside IP
    This problem was difficult to diagnose correctly as http4s simply halted.
    Decided to check it with restclient.el (after some silly pointless hesitation)
    and realized that the request just got swallowed in a quagmire before timing out. Thanks NTNU

    Solution was to use wireguard and the following tutorial
    https://securityespresso.org/tutorials/2019/03/22/vpn-server-using-wireguard-on-ubuntu/
   
    note the step where the interface esn3 (or smth like that) is supplied, remember to change this.

*** Problem: DB in invalid state
    The current scheme seems to be invalid in some form, thus restoring from dump fails to correctly
    add rows to the table containing resource URIs.
    This triggers a doobie sanity check error which was really obnoxious to figure out with no stack trace.
    Suggestion for next time: Consider creating a query print mode for easier debugging
*** Problem: ZIP not in path
    Minor issue, when deleting jvm while an sbt session is running this error occurs.
    Happened because I went from 11.03  to 8 for metals reasons.

* Clogged stream checklist
  + NYI exceptions might end up being swallowed
  + Check if all streams are running, not just the head of a stream of streams etc.
  + Check for Stream[F,Nothing] >> Stream[F,A]
    This is wrong, should be Stream[F,Nothing] ++ Stream[F,A]
** Previous cases
     
*** The mystery of the silent topics
   I suspect this issue has been a problem for a long time, but I finally found it when
   working on porting the GA to the new generalized framework.
   This gave me a very large surface of errors, I'm not sure it was a good idea, or if I
   would have been better off using the old GA stuff, which at least worked.
   After unsuccessfully looking at the GA and generalized pipe code I decided to test if
   data was even getting through which I did by printing the head of the list of streams from
   topic in Assemblers. This only worked because I happened to choose the first topic, which
   it turns out had all the data. I then tried to rewrite roundrobin yet again (poor round
   robin was likely framed many times because of this silly bug). When I couldn't get that 
   to work, I tried to simply interleave the two first streams, which also clogged! I then
   attempted to run output only from the second stream, which gave no output! This made me 
   realize that in all likelyhood the broadcaster had a bug, which it indirectly did. The
   broadcaster simply multiplexes tagged segments based on their channel tag, tags which was
   added in the tag pipe. The tag pipe was the source of the bug in the end, as it didn't 
   actually increment the tag inbetween segments! OOPS!!!
   Fix: 
   
   >>>>>>
   Pull.output1(TaggedSegment(n, seg.toVector)) >> go(n%60, tl)
   <<<<<<
   Pull.output1(TaggedSegment(n, seg.toVector)) >> go((n + 1) % 60, tl)
          
*** Return of the unimplemented method
    Implemented a new pipe for producing stimulus signal periods. The function from Hz to 
    period was not implemented but the exception was swallowed.
    This should be tested properly, but until then using ??? is very dangerous since NYI 
    errors might be swallowed.

* On testing
  Scala has 3 major testing frameworks.
  + ScalaCheck
    Focuses on property-based testing 
  + specs2
    Concentrates on behavior-drive development. 
  + ScalaTest 
    a flexible testing platform.
    "ScalaTest enables teams to use the style of testing that fits them best, and
    supports property-based testing via integration with ScalaCheck."
  
  These frameworks are compatible with each other, typically
  ScalaTest and ScalaCheck are used in conjunction.

   
* Adding sideband data?
  It could for some recordings be interesting to record when stim is running, in
  case we want to use all electrodes.
  This should be something that can be replicated, but why not just make it explicit?

* Experiment
  Is not as powerful as I had hoped wrt the problems implementing XOR
  
  Should experiment take care of the evaluator pipe stuff?

* XOR
** TODO detail what was difficult with XOR

* Random Kleisli tanker
  Si at jeg har 
  
  fa: Kleisli[IO,Z,A]
  fb: A => IO[B]
  
  Hva er egentlig Kleisli[IO,Z,A]?
  Z => IO[A]
  
  ok, Hva er Kleisli[IO,Z,A].flatMap?
  
  flatMap(fza: Kleisli[IO,Z,A])(f: A => Kleisli[IO,Z,B]): Kleisli[IO,Z,B]
  
  
  tenk 

  def getA(z: DB): IO[A]
  def getB(z: DB, a: A): IO[B]
  
  Vi kan gj첩re
  val db: DB = new DBconn
  val aPartial = getA(z)
  val bPartial = getB(z)
  
  aPartial flatMap ( a => bPartial(a) )
  > IO[B]
  
  For 책 slippe dette/garantere at de f책r samme conf s책 kan vi heller

  def getA = Kleisli[IO,Z,A]
  def getB(a) = Kleisli[IO,Z,B]
  
  for {
    a <- getA
    b <- getB(a)
  } yield b

  som da er av typen Kleisli[IO,Z,B]
  
  som betyr at gitt en Z har vi en IO[B]
  
  la oss si at vi har en

  def getA = IO[A]
  def getB(a: A): Kleisli[IO,Z,B]

  hvordan kan vi enkelt gj첩re om getA til en Kleisli[IO,Z,A]?
  

  Vel og bra det, men!

  Hva hvis vi har 
  def getA(z: DB): (A, DB)
  def getB(z: DB): B

  Alts책, at getA ikke bare tar DB, men endrer den
  

  So I have a question about Reader and State.
  Say I have some functions

  ``` scala
  def getAthenSet: State[Conf,A] = ???
  def getB: Reader[Conf,B] = ???
  ```
  
  

* Gitter questions
  How can I terminate a stream that is being observed?
  
  myStream
    .observe(someSink)
    .take(4)

  Here someSink won't get terminated, thus we need to use Some/None


* Setting up proxy
  $wg-quick up wg0
  on both endpoint and client
  
